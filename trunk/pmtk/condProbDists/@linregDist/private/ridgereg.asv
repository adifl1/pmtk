function [w, w0]= ridgereg(X, y, lambda, method, computeOffset)

if computeOffset
  % center input and output, so we can estimate w0 separately
  % since we don't want to shrink w0
  xbar = mean(X);
  XC = X - repmat(xbar,size(X,1),1);
  y = y(:);
  ybar = mean(y);
  yC = y-ybar;
else
  XC = X;
  yC = y;
end

switch method
  case 'QR'
    if isscalar(Lambda)
      if Lambda==0
        w = XC \ yC; % least squares
      else
        XX  = [XC; sqrt(Lambda)*eye(d)];
        yy = [yC; zeros(d,1)];
        w  = XX \ yy; % ridge
      end
    else
      XX  = [XC; Lambda];
      yy = [yC; zeros(size(Lambda,1),1)];
      w  = XX \ yy; % generalized ridge
    end
    
  case 'SVD'
    
    [U,D,V] = svd(XtrainC,'econ');
    D2 = diag(D.^2);
    w = zeros(d+1, length(lambdas));
    errTest = zeros(length(lambdas), size(Xtest,1));
    for i=1:length(lambdas)
      lambda = lambdas(i);
      if lambda==0
        ww = pinv(XtrainC)*ytrainC;
      else
        ww  = V*diag(1./(D2 + lambda))*D*U'*ytrainC;
      end
      w0 = ybar - xbar*ww;
      w(1,i) = w0;
      w(2:d+1,i) = ww;
      df(i) = sum(D2./(D2+lambda));

      ypredTrain = [ones(n,1) Xtrain]*w(:,i);
      denom = 1-df(i)/n;
      RSS = sum((ytrain-ypredTrain).^2);
      gcv(i) = RSS/(n-df(i));
      mseTrain(i) = RSS/n;
      if ~isempty(Xtest)
        ntest = size(Xtest, 1);
        ypredTest = [ones(ntest,1) Xtest]*w(:,i);
        mseTest(i) = mean((ypredTest-ytest).^2);
        errTest(i,:) = (ytest-ypredTest).^2;
      else
        mseTest = [];
      end
    end
  otherwise
    error(['unknown method 
end


if computeOffset
  w0 = ybar - xbar*w;
  w = [w0; w];
end