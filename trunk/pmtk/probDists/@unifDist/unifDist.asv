classdef unifDist < scalarDist 
  %  continuous uniform distribution
  
  properties
    lo;
    hi;
  end
  
  %% Main methods
  methods
    function m = unifDist(lo, hi)
      if nargin == 0
        lo = []; hi =[];
      end
     m.lo = lo; m.hi = hi;
    end

    function d = ndims(m)
      d = length(m.lo);
    end
    
   
    
    
    function L = logprob(obj, X)
      % L(i,j) = log p(X(i) | params(j))
      [N d] = size(X);
      d = ndims(obj);
      if d==1, X = X(:); end
      L = zeros(N,d);
      for j=1:d
        valid = find( (X(:,j) >= obj.lo(j)) && (X(:,j) <= obj.hi(j)) );
        prob(valid,j) = 1/(obj.hi(j)-obj.lo(j));
        L(valid,j) = -log(obj.hi(j)-obj.lo(j));
        L(~valid,j) 
      end
    end
    
   
   
     function X = sample(obj, n)
      % X(i,j) = sample ffrom params(j) i=1:n
      checkParamsAreConst(obj)
      d = ndims(obj);
      assert(statsToolboxInstalled);
      for j=1:d
        mu = repmat(obj.mu(j), n, 1);
        X(:,j) = mu + sqrt(obj.sigma2(j))*trnd(obj.dof(j), n, 1);
      end
    end

    function mu = mean(obj)
      checkParamsAreConst(obj)
      mu = obj.mu;
    end

    function mu = mode(m)
      checkParamsAreConst(obj)
      mu = mean(m);
    end

    function C = var(obj)
      checkParamsAreConst(obj)
      C = (obj.dof/obj.dof-2)*obj.sigma2;
    end
   
    function obj = inferParams(obj, varargin)
      % m = inferParams(model, 'name1', val1, 'name2', val2, ...)
      % Arguments are
      % data - data(i) = case i
      % method - currently must be mle
      [X, suffStat, method] = process_options(...
        varargin, 'data', [], 'suffStat', [], 'method', 'mle');
      hasMissingData =  any(isnan(X(:)));
      if any(isnan(X(:)))
        error('cannot handle missing data')
      end
      if ~statsToolboxInstalled
        error('need stats toolbox')
      end
      if ~strcmp(lower(method), 'mle')
        error('can only handle mle')
      end
      params = mle(X, 'distribution', 'tlocationscale');
      obj.mu = params(1);
      obj.sigma2 = params(2);
      obj.dof = params(3);
    end
     
    
     
  end % methods

  %% Demos
  methods
    function demoPlotStudentVsGaussian(dummy, useLog)
      if nargin < 2, useLog = true; end
      dofs = [0.1 1 5];
      xr = [-4 4];
      figure;
      [styles, colors, symbols] = plotColors; 
      N = length(dofs);
      for i=1:N
        dof = dofs(i);
        h = plot(studentDist(dof, 0, 1), 'useLog', useLog, ...
          'xrange', xr, 'plotArgs', {styles{i},'linewidth',2});
        %set(h,'color',colors(i)); set(h,'marker',symbols(i))
        hold on
        legendStr{i} = sprintf('t(%s=%2.1f)', '\nu', dof);
      end
      h = plot(gaussDist(0, 1), 'useLog', useLog, ...
        'xrange', xr, 'plotArgs', {styles{N+1},'linewidth',2});
      legendStr{end+1} = 'N(0,1)';
      legend(legendStr)
      if useLog, ylabel('log density'); else ylabel('density'); end
    end

    function demoStudentVsGaussianRobustnessToOutliers(dummy)
      % Illustrate the robustness of the t-distribution compared to the Gaussian.
      % Written by Matthew Dunham
      gaussVsToutlierDemo;
    end
    
  end
  
  %% Private methods
  methods(Access = 'protected')
    function checkParamsAreConst(obj)
      p = isa(obj.mu, 'double') && isa(obj.sigma2, 'double') && isa(obj.dof, 'double');
      if ~p
        error('params must be constant')
      end
    end
  end
  
end