classdef mvnExactInfer 
  % exact inference in the multivariate normal 
  
  properties
    ndims;
    model; % model params
    bel; % belief state - gets updated with evidence
    visVars; visValues;
    %evidenceEntered;
  end
 
  methods
    function eng = mvnExactInfer(mu, Sigma)
      if nargin == 0, mu = []; Sigma = []; end
      eng = setParams(eng, mu, Sigma);
    end
    
    function eng = setParams(eng, mu, Sigma)
      if ~isempty(eng.model) && isequal(mu, eng.model.mu) && isequal(Sigma, eng.model.Sigma)
        return;
      else
        eng.model.mu = mu; eng.model.Sigma = Sigma;
        % reset belief state
        %eng.bel.mu = mu; eng.bel.Sigma = Sigma;
        eng.visVars = NaN; eng.visValues= NaN; % to distinguish from [] evidence
      end
      eng.ndims = length(mu);
    end
    
     function [X] = sample(eng, n)
      % X(i,:) = sample for i=1:n
      %if ~eng.evidenceEntered, error('must call enterEvidence first'); end
      mu = eng.bel.mu; C = eng.bel.Sigma; d = length(mu);
      if statsToolboxInstalled
        X = mvnrnd(mu, C, n);
      else
        R = chol(C);
        X = repmat(mu', n, 1) + (R'*randn(d,n))';
      end
     end
    
    function postQuery = marginal(eng, queryVars)
      d = eng.ndims;
      %[V,H] = findVisHid(eng.x);
      V = eng.visVars; 
      H = mysetdiff(1:d, V);
      mu = zeros(d,1);
      Sigma = zeros(d,d);
      xV = eng.visValues;
      mu(V) = xV; % re-insert visible data
      mu(H) = eng.bel.mu; % we only store distribution of hidden variables
      Sigma(H,H) = eng.bel.Sigma; 
      dims = queryVars;
      postQuery = mvnDist(mu(dims), Sigma(dims,dims));
    end


   function eng = enterEvidence(eng, visVars, visValues)
      % p(Xh|Xvis=vis)
      %d = eng.ndims;
      % enter data into current belief state to allow recursive updating
      % but indexing might be wrong
      %[muAgivenB, SigmaAgivenB] = gaussianConditioning(...
      %  eng.bel.mu, eng.bel.Sigma, visVars, visValues);
       % enter data into fresh belief state
      [muAgivenB, SigmaAgivenB] = gaussianConditioning(...
        eng.model.mu, eng.model.Sigma, visVars, visValues);
      eng.bel.mu = muAgivenB; eng.bel.Sigma = SigmaAgivenB;
      eng.visVars = visVars; eng.visValues = visValues;
   end
   
  
  end % methods

end