classdef chordalGraph < undirectedGraph  
  % chordal (decomposable/ triangulated) graphs
  
  properties(GetAccess = 'public', SetAccess = 'protected')
    perfectElimOrder;
    cliques;
    seps;
    resids;
    hists;
  end

  methods
    
    function obj = chordalGraph(adjMat, action, varargin)
      % [obj, ischordal] = chordalGraph(adjMat, 'checkChordal') 
      %     sets ischordal = false if not chordal (in which case obj is
      %     invalid)
      % [obj, ischordal] = chordalGraph(adjMat, 'makeChordal', 'elimOrder', X, 'nodeWeights', X)
      %    makes adjMat chordal by adding extra edges.
      %    elimOrder is one of {'mcs', 'minFill', 'minWeight'}
      %     where mcs = max cardinaltiy search. (Default is minWeight.)
      %    If elimOrder = minWeight, you can specify nodeWeights
      %    which, for discrete rv's, is log the number of states.
      %    If weights = ones(1,d) (Default), we minimize the induced clique size.
      if nargin == 0
        obj.adjMat = [];
        return;
      end;
      obj.adjMat = adjMat;
      if nargin < 2, action = 'checkChordal'; end
      if strcmp(action, 'makeChordal')
        d = length(adjMat);
        [elimOrder, nodeWeights] = process_options(...
          varargin, 'elimOrder', 'minFill', 'nodeWeights', ones(1,d));
        if strcmp(elimOrder, 'minFill')
          nodeWeights = zeros(1,d);
        end
        
          
      obj.adjMat = mkGraphSymmetric(G);
      obj.adjMat = setdiag(obj.adjMat,0);
      %obj.edgeStruct = makeEdgeStruct(double(obj.adjMat));
      obj = initEdgeStruct(obj);
      switch action
        case 'checkChordal'
          [ischordal, obj.perfectElimOrder] = check_chordal(obj.adjMat);
      end
      
      if ~ischordal
        warning('BLT:chordalGraph', 'graph is not chordal')
        obj.perfectElimOrder = [];
        return;
      end
      [obj.cliques, cliquesNonRIP] = chordal_to_ripcliques_cell(obj.adjMat, obj.perfectElimOrder);
      [obj.seps, obj.resids, obj.hists] = seps_resids_hists_cell(obj.cliques);
    end

  function objs = mkAllChordal(dummy, nnodes, loadFromFile)
      % Returns cell array of all chordal graphs on nnodes.
      % eg. CGs = mkAllUG(chordalGraph(), 5);
      % Warning: the number of CGs on d nodes is exponential in d
      % See Helen Armstrong's PhD thesis, p149, U New South Wales 2005
      % Nnodes  2   3   4    5       6       7        8     
      % Ncg     2   8   61   822  18,154  617,675  30,888,596
      if nargin < 3, loadFromFile = true; end
      Gs = mkAllUG(undirectedGraph(), nnodes, loadFromFile);
      objs = {};
      for i=1:length(Gs)
        [cg, ischordal] = chordalGraph(Gs{i}, 'checkChordal');
        if ischordal
          objs{end+1} = cg;
        end
      end
    end


  end % methods

end