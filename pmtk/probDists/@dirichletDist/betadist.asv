classdef betadist < probdist
  
  properties
    a;
    b;
  end
 
  properties(Static)
    debug = false;
  end
  
  methods 
    function obj =  betadist(a,b)
      % betadist(a,b) propto X^{a-1} (1-X)^{b-1}
      % a and b can be vectors, in which case must be same length
      if nargin == 0
        a = 1; b = 1;
      end
      obj.a = a;
      obj.b = b;
    end
  
    function d = ndims(obj)
      d = length(obj.a);
    end
    
    function plot(obj)
      % eg plot(betadist([0.1 1 2 8], [0.1 1 3 4]))
      xs = 0:0.01:1;
      styles = plotColors;
      for i=1:ndims(obj)
        %p = betapdf(xs, obj.a(i), obj.b(i));
        p = exp(logprob(obj, xs, i));
        h{i} = plot(xs, p, styles{wrap(i,length(styles))}, 'linewidth', 2);
        str{i} = sprintf('a=%3.2f, b=%3.2f', obj.a(i), obj.b(i));
        hold on
      end
      legend(str)
      title('beta distributions')
    end
    
    function m = mean(obj)
      m = obj.a ./(obj.a + obj.b);
    end
    
    function m = mode(obj)
      valid = find(obj.a + obj.b > 2);
      d = ndims(obj);
      m = NaN*ones(1,d);
      m(valid) = (obj.a(valid)  - 1) ./ (obj.a(valid) + obj.b(valid) - 2);
    end  
    
     function m = var(obj)
      valid = find(obj.a + obj.b > 1);
      d = ndims(obj);
      m = NaN*ones(1,d);
      m(valid) = (obj.a(valid) .* obj.b(valid)) ./ ...
        ( (obj.a(valid) + obj.b(valid)).^2 .* (obj.a(valid) + obj.b(valid) + 1) );
     end  
     
     function C = cov(obj)
       C = var(obj);
     end
   
     function X = sample(obj, n)
       % X(i,j) = sample from params(j) for i=1:n
       d = ndims(obj);
       X = zeros(n, d);
       for j=1:d
         if useStatsToolbox
           X(:,j) = betarnd(obj.a(j), obj.b(j), n, 1);
         else
           error('not supported')
         end
       end
     end
    
     function p = logprob(obj, X, paramNdx)
       % p(i,j) = log p(x(i) | params(j))
       d = ndims(obj);
       if nargin < 3, paramNdx = 1:d; end
       x = X(:);
       n = length(x);
       p = zeros(n,length(paramNdx));
       for jj=1:length(paramNdx)
         j = paramNdx(jj);
         a = obj.a(j); b = obj.b(j);
         %p(:,jj) = betapdf(x, obj.a(j), obj.b(j));
         % When a==1, the density has a limit of beta(a,b) at x==0, and
         % similarly when b==1 at x==1.  Force that, instead of 0*log(0) = NaN.
         warn = warning('off','MATLAB:log:logOfZero');
         logkerna = (a-1).*log(x);   logkerna(a==1 & x==0) = 0;
         logkernb = (b-1).*log(1-x); logkernb(b==1 & x==1) = 0;
         warning(warn);
         p(:,jj) = logkerna + logkernb - betaln(a,b);
       end
     end
     
     function nll = negloglik(obj, X)
       % nll(j) = -sum_i log p(x(i) | params(j))
       % eg obj = betadist(2,2); X = sample(obj, 100); negloglik(obj, X)
       nll = -sum(logprob(obj, X),1);
       if obj.debug & useStatsToolbox 
         disp('debugging negloglik')
         d = ndims(obj);
         x = X(:);
         n = length(x);
         for j=1:d
           nll1(j) = betalike([obj.a(j) obj.b(j)], x);
         end
         assert(approxeq(nll1, nll))
       end
     end
     
     function obj = fit(obj, X)
       if useStatsToolbox
         phat = betafit(max(1e-6, min(1-1e-6,X(:)))); % prevent 0s and 1s
         %phat = betafit(X(:));
         obj.a = phat(1); obj.b = phat(2);
       else
         error('not supported')
       end
     end
    
     function pr = predict(obj, D)
       error('not supported')
     end

     function pr = marginal(obj, nodeNames)
       error('not supported')
     end

     function obj = observe(obj, nodeNames, D)
       error('not supported')
     end
  end
    
end